<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>review</artifactId>
        <groupId>com.ljc</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>review-alg</artifactId>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <!--
                scope的解释：
                compile：默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath中可用，同时它们也会被打包。
                provided：只有在当JDK或者一个容器已提供该依赖之后才使用。例如， 如果你开发了一个web应用，你可能在编译classpath中需要可用的Servlet API
                    来编译一个servlet，但是你不会想要在打包好的WAR中包含这个Servlet API；这个Servlet API JAR 由你的应用服务器或者servlet 容器提供。
                    已提供范围的依赖在编译classpath（不是运行时）可用。它们不是传递性的，也不会被打包。
                runtime：依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你可能在编译的时候只需要JDBC API JAR，而只有在运行的时候才需要JDBC驱动实现。
                test：在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。注：只有在标记为test的文件夹中可用！！
            -->
            <!--<scope>test</scope>-->
        </dependency>
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <version>3.2</version>
            <!--<scope>test</scope>-->
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-easymock</artifactId>
            <version>1.5.1</version>
            <!--<scope>test</scope>-->
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>1.5.1</version>
            <!--<scope>test</scope>-->
        </dependency>

    </dependencies>


</project>