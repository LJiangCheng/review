
1.非阻塞算法：如果在某种算法中，一个线程的失败或挂起不会导致其他线程也失败或挂起，那么这种算法就称为非阻塞算法

2.原子的域更新器：能够在已有的volatile域上使用CAS。如果有大量频繁分配且生命周期短暂的原子变量，可以尝试使用原子的域更新器
  替换实现以避免大量对象创建从而提高性能。不过几乎所有情况下基本的原子变量性能都很不错。 P275

3.ABA问题：如有需要，可以通过增加版本号避免此类问题。Java提供工具类：AtomicStampedReference、AtomicMarkableReference

4.非阻塞算法通过底层的并发原语来维持线程安全性，这些底层原语通过原子变量类对外公开，为基本类型和对象引用提供原子的更新操作