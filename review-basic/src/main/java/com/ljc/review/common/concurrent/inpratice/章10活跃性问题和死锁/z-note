
1.在持有锁时调用某个外部方法将出现活跃性问题。这个外部方法中可能会获取其他锁（可能导致死锁），或者阻塞时间过长，导致
  其他线程无法及时获得当前被持有的锁。

2.死锁
    开放调用（缩小同步代码块的范围，仅在涉及同步状态时加锁。这可以消除死锁的风险，但也使得方法失去原子性）
    资源死锁
        数据库连接（多个线程以不恰当的顺序访问A、B数据库连接池）
        有界线程池、资源池不能和相互依赖的任务一起使用

3.分析和避免死锁
    支持定时的锁：Lock.tryLock
    通过线程转储信息来分析死锁（Thread Dump）